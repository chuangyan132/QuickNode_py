#!
# @brief   
# @project qn_pluginExe
# @file    qn_ErroType.py
# @author  Chuang Yan
# @email   Yanchuang1122@gmail.com  
# @license 
#     Copyright(C) Shining3D  
# @versions 
#     V0.1-ChuangYan 11/03/2024 13:06  
#
from qn_BasicType import *

QN_SUCCESS_MASK = 0
QN_ERROR_MASK = 1
QN_ERR_FACILITY_MASK = 0x80FF0000

# Facility codes
QN_FACILITY_PLUGIN = 1
QN_FACILITY_RPC = 2
QN_FACILITY_NULL = 0
QN_FACILITY_STL = 0x04



# Success codes
QN_OK = 0x00000000
QN_S_FALSE = 0x00000001
QN_REDUNDANCY_OK = 0x00000002



def MAKE_QN_ERROR_RESULT(fac, code):
    result = (((QN_ERROR_MASK << 31) | (fac << 16) | (code)) & 0xFFFFFFFF)
    return result - 0x100000000 if result & 0x80000000 else result

def QN_SUCCEEDED(result):
    return result >= 0


QN_FAIL = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 1)
QN_ABORT = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 2)
QN_INVALIDARG = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 3)
QN_OUTOFMEMORY = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 4)
QN_PENDING = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 5)
QN_E_POINTER = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 6)
QN_UNEXPECTED = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 7)
QN_ACCESSDENIED = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 8)
QN_E_HANDLE = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 9)
QN_NOT_SUPPORTED = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 10)
QN_ALREADY_EXIST = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 11)
QN_NOT_FIND = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 12)
QN_SERVICE_UNKNOWN_TYPE = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 13)
QN_SERVICE_NOT_EXIST = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 14)
QN_BUFFER_SMALL = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 15)
QN_OVERFLOW = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 16)
QN_INVALID_DATATYPE = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 17)
QN_EXCEEDS_LIMIT = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 18)
QN_OUT_OF_DATE = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 19)
QN_MISUSE = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 20)
QN_INVALID_SESSION = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 21)
QN_TIMEOUT = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 22)
QN_LICENSE_FAILED = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 23)
QN_LICENSE_LIMITED = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 24)
QN_BUSY = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 25)
QN_OFFLINE = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 26)
QN_BAD_LENGTH = MAKE_QN_ERROR_RESULT(QN_FACILITY_NULL, 27)

# Facility codes for services and STL exceptions
QN_FACILITY_SERVICE = 0x03


# Service-related error codes
QN_SVC_NOT_AVAILABLE = MAKE_QN_ERROR_RESULT(QN_FACILITY_SERVICE, 0x0000)
QN_NOT_STARTUP = MAKE_QN_ERROR_RESULT(QN_FACILITY_SERVICE, 0x0001)
QN_EXCEPTION_REMOTE = MAKE_QN_ERROR_RESULT(QN_FACILITY_SERVICE, 0x0002)
QN_EXCEPTION_LOCAL = MAKE_QN_ERROR_RESULT(QN_FACILITY_SERVICE, 0x0003)
QN_STAND_BY = MAKE_QN_ERROR_RESULT(QN_FACILITY_SERVICE, 0x0004)
QN_LOGIN_DENIED = MAKE_QN_ERROR_RESULT(QN_FACILITY_SERVICE, 0x0005)
QN_SYSTEM_CONSTRAINT = MAKE_QN_ERROR_RESULT(QN_FACILITY_SERVICE, 0x0006)

# STL exception error codes
STL_UNKNOWN = MAKE_QN_ERROR_RESULT(QN_FACILITY_STL, 0x0000)
STL_BAD_ALLOC = MAKE_QN_ERROR_RESULT(QN_FACILITY_STL, 0x0001)
STL_BAD_CAST = MAKE_QN_ERROR_RESULT(QN_FACILITY_STL, 0x0002)
STL_BAD_TYPEID = MAKE_QN_ERROR_RESULT(QN_FACILITY_STL, 0x0003)
STL_DOMAIN_ERROR = MAKE_QN_ERROR_RESULT(QN_FACILITY_STL, 0x0004)
STL_INVALID_ARGUMENT = MAKE_QN_ERROR_RESULT(QN_FACILITY_STL, 0x0005)
STL_LENGTH_ERROR = MAKE_QN_ERROR_RESULT(QN_FACILITY_STL, 0x0006)
STL_OUT_OF_RANGE = MAKE_QN_ERROR_RESULT(QN_FACILITY_STL, 0x0007)
STL_IOS_BASE_FAILURE = MAKE_QN_ERROR_RESULT(QN_FACILITY_STL, 0x0008)
STL_RANGE_ERROR = MAKE_QN_ERROR_RESULT(QN_FACILITY_STL, 0x0009)
STL_OVERFLOW_ERROR = MAKE_QN_ERROR_RESULT(QN_FACILITY_STL, 0x000A)
STL_UNDERFLOW_ERROR = MAKE_QN_ERROR_RESULT(QN_FACILITY_STL, 0x000B)
STL_BAD_EXCEPTION = MAKE_QN_ERROR_RESULT(QN_FACILITY_STL, 0x000C)
